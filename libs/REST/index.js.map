{"version":3,"file":"index.js","sources":["../../src/REST/index.js"],"sourcesContent":["import axios from 'axios'\n\n/**\n * 基于 axios 的 RESTful HTTP 简单封装\n * @author 赵金添 <729234283@qq.com>\n */\nexport default class REST {\n  /**\n   * 构造方法\n   */\n  constructor () {\n    /**\n     * 接口基础地址\n     * @type {string}\n     */\n    this.baseURL = ''\n\n    /**\n     * 接口版本\n     * @type {string}\n     */\n    this.version = ''\n\n    /**\n     * 请求路劲\n     * @type {string}\n     */\n    this.path = ''\n\n    /**\n     * Headers\n     * @type {Object}\n     */\n    this.headers = {}\n\n    // 支持的请求方式\n    const methods = ['GET', 'POST', 'PATCH', 'PUT', 'DELETE']\n\n    // 注册方法到 this\n    methods.forEach((method) => {\n      this[method] = options => this.request(method, options)\n    })\n  }\n\n  /**\n   * 请求\n   * @param {string} method='GET' 请求方式\n   * @param {Object} [options={}] 选项\n   * @param {string} [options.id=''] 资源唯一标示，一般是 ID\n   * @param {Object} [options.query=null] GET 参数\n   * @param {Object} [options.body=null] POST/PUT/PATCH 数据\n   * @return {Object}\n   */\n  request (method = 'GET', options = {}) {\n    const {id = '', query = null, body = null} = options\n    let url = this.version ? `/${this.version}/${this.path}` : `/${this.path}`\n\n    if (id) {\n      url = `${url}/${id}`\n    }\n\n    // GET\n    if (query) {\n      url = `${url}${this.toURL(query)}`\n    }\n\n    return new Promise((resolve, reject) => {\n      axios({\n        baseURL: this.baseURL,\n        headers: this.headers,\n        method,\n        url,\n        data: body\n      }).then(resolve).catch(reject)\n    })\n  }\n\n  /**\n   * 对象转 URL\n   * @param {Object} obj 待转化对象\n   * @return {string}\n   */\n  toURL (obj) {\n    if (!obj || !Object.keys(obj).length) {\n      return ''\n    }\n\n    return '?' + Object.keys(obj).map(key => `${key}=${encodeURIComponent(obj[key])}`).join('&')\n  }\n\n  /**\n   * 附加路劲\n   * @param {string} [path=''] 路劲\n   */\n  addPath (path = '') {\n    this.path = `${this.path}/${path}`\n\n    return this\n  }\n\n  /**\n   * 添加 Headers\n   * @param {Object} headers Headers\n   */\n  addHeaders (headers) {\n    Object.assign(this.headers, headers)\n\n    return this\n  }\n\n  /**\n   * 路劲参数替换\n   * @param {Object} options={} 路劲参数列表\n   */\n  replace (options = {}) {\n    Object.keys(options).forEach(value => {\n      this.path = this.path.replace(new RegExp(`{${value}}`, 'img'), options[value])\n    })\n\n    return this\n  }\n}\n"],"names":["REST","baseURL","version","path","headers","forEach","method","_this","request","options","id","query","body","url","this","toURL","Promise","resolve","reject","_this2","then","catch","obj","Object","keys","length","map","key","encodeURIComponent","join","assign","_this3","replace","RegExp","value"],"mappings":"gyBAMqBA,oEASZC,QAAU,QAMVC,QAAU,QAMVC,KAAO,QAMPC,YAGY,MAAO,OAAQ,QAAS,MAAO,UAGxCC,QAAQ,SAACC,KACVA,GAAU,mBAAWC,EAAKC,QAAQF,EAAQG,uEAa1CH,yDAAS,MAAOG,8DACsBA,EAAtCC,GAAAA,aAAK,OAAiCD,EAA7BE,MAAAA,aAAQ,SAAqBF,EAAfG,KAAAA,aAAO,OACjCC,EAAMC,KAAKZ,YAAcY,KAAKZ,YAAWY,KAAKX,SAAaW,KAAKX,YAEhEO,MACOG,MAAOH,GAIdC,SACOE,EAAMC,KAAKC,MAAMJ,IAGrB,IAAIK,QAAQ,SAACC,EAASC,kBAEhBC,EAAKlB,gBACLkB,EAAKf,4BAGRQ,IACLQ,KAAKH,GAASI,MAAMH,mCASpBI,UACAA,GAAQC,OAAOC,KAAKF,GAAKG,OAIvB,IAAMF,OAAOC,KAAKF,GAAKI,IAAI,mBAAUC,MAAOC,mBAAmBN,EAAIK,MAASE,KAAK,KAH/E,yCAUF1B,yDAAO,eACTA,KAAUW,KAAKX,SAAQA,EAErBW,wCAOGV,iBACH0B,OAAOhB,KAAKV,QAASA,GAErBU,kDAOAL,0EACAe,KAAKf,GAASJ,QAAQ,cACtBF,KAAO4B,EAAK5B,KAAK6B,QAAQ,IAAIC,WAAWC,MAAU,OAAQzB,EAAQyB,MAGlEpB"}